{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","imgs","url","id","currentScore","topScore","correctIncorrect","clicked","lastIdClicked","handleClick","console","log","_this","handleShuffle","handleIncrement","handleReset","setState","shuffledDogs","array","i","length","j","Math","floor","random","_ref","dogImgs","alert","this","style","imagestyle","width","height","margin","self","react_default","a","createElement","className","map","singleImg","onClick","key","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uLC0JzBC,6MAxIXC,MAAQ,CACNC,KAAM,CAEJ,CACEC,IAAI,sEACJC,GAAI,GAEN,CACED,IAAI,oHACJC,GAAI,GAEN,CACED,IAAI,gCACJC,GAAI,GAEN,CACED,IAAI,6GACJC,GAAI,GAEN,CACED,IAAI,yFACJC,GAAI,GAEN,CACED,IAAI,6GACJC,GAAI,GAEN,CACED,IAAI,6FACJC,GAAI,GAEN,CACED,IAAI,6GACJC,GAAI,GAEN,CACED,IAAI,yEACJC,GAAI,GAEN,CACED,IAAK,wFACLC,GAAI,IAEN,CACED,IAAK,2GACLC,GAAI,IAEN,CACED,IAAK,uDACLC,GAAI,KAGRC,aAAc,EACdC,SAAU,EACVC,iBAAkB,GAClBC,QAAS,GACTC,cAAe,OAInBC,YAAc,SAAAN,GACZO,QAAQC,IAAI,iBAAiBR,GAC7BS,EAAKC,cAAcV,MAYrBW,gBAAkB,WAchBF,EAAKC,mBAGPE,YAAc,WACZH,EAAKI,SAAS,CACZZ,aAAc,EACdC,SAAUO,EAAKZ,MAAMK,SACrBC,iBAAkB,2BAClBC,QAAS,KAIXK,EAAKC,mBAIPA,cAAgB,SAACV,GACf,IACIc,EAxHR,SAAiBC,GAEf,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADCM,EAElB,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkCM,EAAA,GAE9BP,EAAMG,GAFwBI,EAAA,GAK3C,OAAOP,EAiHcQ,CADLd,EAAKZ,MAAMC,MAErBW,EAAKZ,MAAMQ,gBAAkBL,EAC/BwB,MAAM,cAEAf,EAAKI,SAAS,CAAEf,KAAMgB,EAAcT,cAAeL,6EAO3DO,QAAQC,IAAIiB,KAAK5B,OACjB,IAAM6B,EAAQ,CACZC,WAAY,CACVC,MAAO,QACPC,OAAQ,QACRC,OAAQ,SAGRC,EAAON,KACX,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZV,KAAK5B,MAAMC,KAAKsC,IAAI,SAAUC,EAAWrB,GACxC,OAAQgB,EAAAC,EAAAC,cAAA,OAAKI,QAAS,WAAKP,EAAKzB,YAAY+B,EAAUrC,KAAM0B,MAAOA,EAAMC,WAAYY,IAAKvB,EAAGwB,IAAKH,EAAUtC,gBApIpG0C,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c84b977f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction dogImgs(array) {\n\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n\n  return array;\n};\n// import { start } from 'repl';\n\nclass App extends Component {\n  // constructor(props) {\n  //   super(props)\n    state = {\n      imgs: [\n\n        {\n          url:\"https://cdn.pixabay.com/photo/2016/02/19/15/46/dog-1210559__340.jpg\",\n          id: 0\n        },\n        {\n          url:\"https://images.unsplash.com/photo-1507146426996-ef05306b995a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&w=1000&q=80\",\n          id: 1\n        },\n        {\n          url:\"https://i.imgur.com/XSVpW.jpg\",\n          id: 2\n        },\n        {\n          url:\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQXLEMdD_x_qzPbuHjZPOSFK18zWFsMfXJriW77CK2qqzIYz46Ojw\",\n          id: 3\n        },\n        {\n          url:\"https://tractive.com/static/images/menu/Tractive-GPS-3G-Dalmatian-Dog-in-the-woods.jpg\",\n          id: 4\n        },\n        {\n          url:\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQN1MRh1lrDtlxIULEoi-khPIeDz6EtrOZe2sxE01Idr5B3MfBevw\",\n          id: 5\n        },\n        {\n          url:\"https://hips.hearstapps.com/ghk.h-cdn.co/assets/17/20/1495031140-gettyimages-573950777.jpg\",\n          id: 7\n        },\n        {\n          url:\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSEJgJR3Im5OIkha28Hd_VADjd8ErO_p2lmzdwRwao-bt1iaa3oIA\",\n          id: 8\n        },\n        {\n          url:\"http://petharbor.com/get_image.asp?RES=detail&ID=A514831&LOCATION=TACM\",\n          id: 9\n        },\n        {\n          url: \"https://i.dailymail.co.uk/i/pix/2014/07/26/1406401375831_wps_5_scout_and_buck_jpg.jpg\",\n          id: 10\n        },\n        {\n          url: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRIvHrea4dtFXJj5ZjHYqw3oQ7eP38eDi2TySd3lgnI8KXxYTpR\",\n          id: 11\n        },\n        {\n          url: \"https://www.what-dog.net/Images/faces2/scroll000.jpg\",\n          id: 12\n        }],\n      \n      currentScore: 0,\n      topScore: 0,\n      correctIncorrect: \"\",\n      clicked: [],\n      lastIdClicked: 1000,\n    };\n  // }\n\n  handleClick = id => {\n    console.log(\"we got clicked\",id)\n    this.handleShuffle(id)\n\n    // if (this.state.clicked.indexOf(id) === -1) {\n    //   this.handleIncrement();\n    //   this.setState({ clicked: this.state.clicked.concat(id) });\n\n    // } else {\n    //   this.handleReset();\n    // }\n\n  };\n\n  handleIncrement = () => {\n    // const newScore = this.state.currentScore + 1;\n    // this.setState({\n    //   currentScore: newScore,\n    //   correctIncorrect: \"You guessed correctly!\"\n    // });\n\n    // if (newScore >= this.state.topScore) {\n    //   this.setState({ topScore: newScore });\n    // }\n    // else if (newScore === 12) {\n    //   this.setState({ correctIncorrect: \"You win!\" });\n    // }\n\n    this.handleShuffle();\n  };\n\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      correctIncorrect: \"You guessed incorrectly!\",\n      clicked: []\n\n    });\n\n    this.handleShuffle();\n\n  };\n\n  handleShuffle = (id) => {\n    var oldDogs = this.state.imgs\n    let shuffledDogs = dogImgs(oldDogs);\n    if (this.state.lastIdClicked === id){\n      alert(\" You lose!\")\n          }else{\n            this.setState({ imgs: shuffledDogs, lastIdClicked: id });\n  \n          } \n\n  };\n\n  render() {\n    console.log(this.state);\n    const style = {\n      imagestyle: {\n        width: \"200px\",\n        height: \"200px\",\n        margin: \"10px\",\n      }\n    }\n    let self = this\n    return (\n      <div className=\"App\">\n        {this.state.imgs.map(function (singleImg, i ) {\n          return (<img onClick={()=>{self.handleClick(singleImg.id)}} style={style.imagestyle} key={i} src={singleImg.url}></img>)\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// export { default } from \"./Nav\";"],"sourceRoot":""}